generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:pass@host.docker.internal:5434/evform?schema=public"
}

model users {
  id         Int      @id @default(autoincrement())
  username   String?  @unique @db.VarChar
  password   String?  @db.VarChar
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  role_id    Int
  role       roles    @relation("users_to_roles", fields: [role_id], references: [id], onDelete: Cascade)
  forms      form[]   @relation("form_to_users")
}

model option {
  id          Int      @id @default(autoincrement())
  label       String   @db.VarChar
  value       Int
  question_id Int
  question    question @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model question {
  id          Int        @id @default(autoincrement())
  question    String?    @db.VarChar
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  required    Boolean?   @db.Boolean
  error       String?    @db.VarChar
  placeholder String?    @db.VarChar
  form_id     Int
  form        form       @relation("question_to_form", fields: [form_id], references: [id], onDelete: Cascade)
  options     option[] // Add this relation for multiple-choice questions
  responses   response[] @relation("response_to_question")
}

model form {
  id         Int        @id @default(autoincrement())
  title      String?    @db.VarChar
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user_id    Int
  live       Boolean?   @db.Boolean
  url        String?    @db.VarChar
  user       users      @relation("form_to_users", fields: [user_id], references: [id], onDelete: Cascade)
  questions  question[] @relation("question_to_form")
  responses  response[] @relation("response_to_form")
}

model response {
  id          Int      @id @default(autoincrement())
  answer      String?  @db.VarChar
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  question_id Int
  form_id     Int
  form        form     @relation("response_to_form", fields: [form_id], references: [id], onDelete: Cascade)
  question    question @relation("response_to_question", fields: [question_id], references: [id], onDelete: Cascade)
}

model roles {
  id         Int      @id @default(autoincrement())
  role       String?  @db.VarChar
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users[]  @relation("users_to_roles")
}
